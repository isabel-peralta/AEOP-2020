# -*- coding: utf-8 -*-
"""AEOPDay2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JFNYTvGeGc9MQRMGH1ylHmUdatWNyvLS

### **Introduction to Numpy**
"""

import numpy as np
a = np.array([1, 2, 3], dtype='int16')
print(a)

b = np.array([[9.0, 8.0,7.0], [6.0, 5.0, 4.0]])
print(b)

# Get dimension
b.ndim

# Get shape
b.shape

# Get Type
a.dtype

# Get Size
a.itemsize

#Get total size (a.size is # of elements * a.item size is size of each)
a.size * a.itemsize
a.nbytes
#both get same

"""# **Getting Elements**"""

a = np.array([[1,2,3,4,5,6,7],[8,9,10,11,12,13,14]])
print(a)

# Get a specific element [r, c]
a[1, 5]

# Get a specific row
a[0, :]

# Get a specific column
a [:, 2]

"""# **More Dimesions, Replace, and Repitition**"""

# Getting a little more fancy (startindex:endindex:stepsize)
a[0, 1:6:2]

a[1,5] = 20
print(a)

a[:, 2] = [1, 2]
print(a)

b = np.array([[[1,2],[3,4]],[[5,6],[7,8]]])
print(b)

# Get specific element (work outside in)
b[0, 1, 1]

# replace
b[:,1,:] = [[9,9],[8,8]]
print(b)

# All zeros matrix
np.zeros((2,3))

# All 1s matrix
np.ones((4,2,2), dtype = 'int32')

# Any other number
np.full((2, 2), 99)

# Any other number (full_like)
np.full_like(a.shape, 4)

# Random decimal numbers
np.random.randint(3,7, size=(3, 3))

#Repeat an array
arr = np.array([[1,2,3]])
r1 = np.repeat(arr, 3, axis=0)
print(r1)

grid = np.full((5, 5), 1)
grid[1:4, 1:4] = 0
grid[2,2] = 9
print(grid)

### Be careful when coping arrays
a = np.array([1,2,3])
# b= a equates it
b = a.copy()
b[0] = 100
print(a)

"""# **Mathematics**"""

a = np.array([1, 2, 3, 4])
print(a)

a + 2

a - 2

b = np.array([1,0,1,0])
a + b

"""Linear Algebra"""

a = np.ones((2,3))
print(a)

b = np.full((3,2), 2)
print(b)

# a * b doesn't work because they're different shapes
# matmul works for compatible matrices
np.matmul(a, b)

# Find the determinant
c= np.identity(3)
np.linalg.det(c)

#what????

"""# Statistics"""

stats = np.array([[1,2,3], [4,5,6]])
stats
np.min(stats)
np.max(stats, axis=1)

#so axis is corresponding with.. the actual axis idk why that was hard

np. sum(stats)

"""# Reorganizing Arrays"""

before = np.array([[1,2,3,4],[5,6,7,8]])
print(before)

after = before.reshape((8,1))
print(after)

# Vertically stacking vectors
v1 = np.array([1,2,3,4])
v2 = np.array([5,6,7,8])

np.vstack([v1, v2, v1, v2])

# Horizontal Stacking
h1 = np.ones((2,4))
h2= np.zeros((2,2))

np.hstack((h1, h2))

"""# ***Practice Problems***

Task 2: Shape and Reshape

```
# This is formatted as code
```
"""

import numpy
arr = "1 2 3 4 5 6 7 8 9"
arr = arr.split(' ')
arr = [int(i) for i in arr]
a = numpy.array(arr)
a.reshape(3,3)

## works 1/3 times not sure what that means, other form of it not valid here but valid on website

"""Task 1 Array"""

import numpy

def arrays(arr):
    # complete this function
    # use numpy.array
    a = numpy.array([1, 2, 3, 4, -8, -10])
    np_ar = numpy.array(ar,float)
    print(np_ar[::-1])
arr = raw_input().strip().split(' ')
result = arrays(arr)
print(result)

"""Task 3 Flatten and Transpose"""

import numpy
a = numpy.array([[2 ,2],[1 ,2],[3, 4]])
t = a.T
print(t)
f = a.flatten()
print(f)

"""Task 4 Concatenate"""

import numpy as np
n = 4
m = 3
p = 2
## a = np.array([[1, 2], [1, 2], [1, 2], [1, 2], [3, 4], [3, 4], [3, 4]])
array1 = np.array([[1, 2, 1, 2, 1, 2, 1, 2]])
array1 = array1.reshape(4, 2)
array2 = np.array([[3, 4, 3, 4, 3, 4]])
array2 = array2.reshape(3, 2)
print(array1)
print(array2)
concat = np.concatenate((array1, array2),axis=0)
print(concat)

"""Zeroes and Ones"""

import numpy
zero = numpy.zeros((3, 3, 3))
one = numpy.ones((3, 3, 3))
print(zero)
print(one)

"""Eye and Identity"""

import numpy
a = numpy.eye(5, 5 -1)
b = numpy.identity(5)
print('a', a)
print('b', b)

"""Task 7 Array Mathematics"""

import numpy as np

a = np.array([1, 2, 3, 4, 5], float)
b = np.array([6, 7, 8, 9, 10], float)

print(a+b)
##print(np.add(a, b))
print(a-b)
##print(np.subtract(a, b))
print(a/b)
##print(np.divide(a, b))
print(a*b)
##print(np.multiply(a, b))
print(a%b)
##print(np.mod(a, b))
print(a**b)
##print(np.power(a, b))

"""Task 8 Floor Ceil and Rint"""

## The tool floor returns the floor of the input element-wise.  1.1 -> 1 and 9.9 -> 9
## The tool ceil returns the ceiling of the input element-wise. 1.1 -> 2 and 9.9 -> 10
## The rint tool rounds to the nearest integer of input element-wise. 1.1 -> 1 and 9.9 -> 10

import numpy as np
a = np.array([1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8, 9.9])
print(numpy.floor(a))
print(numpy.ceil(a))
print(numpy.rint(a))

"""Task 9 Sum and Prod"""

import numpy

my_array = numpy.array([ [1, 2], [3, 4] ])

print(numpy.sum(my_array, axis = 0))
print(numpy.prod(my_array, axis = 0))  
print(numpy.sum(my_array, axis = 1))         
print(numpy.prod(my_array, axis = 1))
print(numpy.sum(my_array, axis = None))         
print(numpy.prod(my_array, axis = None))
print(numpy.sum(my_array))     
print(numpy.prod(my_array))

"""Task 10 Min and Max"""

import numpy as np
a = np.array([[4, 2],[2, 5],[3, 7],[1, 3],[4, 0]])
print(np.min(a))
print(np.min(a, axis = 1))
print(np.max(np.min(a, axis=1)))