# -*- coding: utf-8 -*-
"""Digit Recognizer Isabel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1STdbgjgX2eFG-VTK48oHdvzXaijMM5m5
"""

#!pip install tensorflow==2.3.0

import tensorflow as tf

print(tf.__version__)

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import seaborn as sns
import keras
# %matplotlib inline

np.random.seed(2)

from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
import itertools

from keras.utils.np_utils import to_categorical # convert to one-hot-encoding
from keras.models import Sequential, load_model
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D
from keras.optimizers import RMSprop, Adam
from keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import ReduceLROnPlateau

sns.set(style='white', context='notebook', palette='deep')

import warnings 
warnings.filterwarnings("ignore")

train = pd.read_csv("train.csv")
test = pd.read_csv("test.csv")

Y_train = train["label"]

# Drop 'label' column
X_train = train.drop(labels = ["label"],axis = 1) 

# free some space by deleting train
del train 

g = sns.countplot(Y_train)

Y_train.value_counts()

X_train = X_train / 255.0
test = test / 255.0

# Reshape image in 3 dimensions (height = 28px, width = 28px , canal = 1)
X_train = X_train.values.reshape(-1,28,28,1)
test = test.values.reshape(-1,28,28,1)

X_test = test

# Encode labels to one hot vectors (ex : 2 -> [0,0,1,0,0,0,0,0,0,0])
Y_train = to_categorical(Y_train, num_classes = 10)

# Split the train and the validation set for the fitting

X_train, X_val, Y_train, Y_val = train_test_split(X_train, Y_train, test_size = 0.1, random_state=2)
print(X_train.shape)
print(X_val.shape)

g = plt.imshow(X_train[9][:,:,0])

"""# Convolutional Layers without Data Augmentation

Kaggle Score = 0.99228
"""

model = Sequential()

model.add(Conv2D(filters = 32, kernel_size = (3,3),padding = 'Same', 
                 activation ='relu', input_shape = (28,28,1)))
model.add(Conv2D(filters = 32, kernel_size = (3,3),padding = 'Same', 
                 activation ='relu'))
model.add(MaxPool2D(pool_size=(2,2)))
model.add(Dropout(0.30))

model.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', 
                 activation ='relu'))
model.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', 
                 activation ='relu'))
model.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))
model.add(Dropout(0.30))

model.add(Conv2D(filters = 12, kernel_size = (3,3),padding = 'Same', 
                 activation ='relu'))
model.add(Conv2D(filters = 12, kernel_size = (3,3),padding = 'Same', 
                 activation ='relu'))
model.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))
model.add(Dropout(0.1))

model.add(Flatten())
model.add(Dense(256, activation = "relu"))
model.add(Dropout(0.30))
model.add(Dense(10, activation = "softmax"))

model.summary()

#optimizer=RMSprop(lr=0.001, rho=0.9, epsilon=1e-08, decay=0.0)
optimizer = Adam(lr=0.01)
model.compile(optimizer = optimizer , loss = "categorical_crossentropy", metrics=["accuracy"])

# Set a learning rate annealer
learning_rate_reduction = ReduceLROnPlateau(monitor='val_loss', 
                                            patience=7, 
                                            verbose=1, 
                                            factor=0.1, 
                                            min_lr=0.00000001)

snapshot_name="digitrec"
model_checkpoint = tf.keras.callbacks.ModelCheckpoint(
    filepath=snapshot_name+".{epoch:02d}-{val_accuracy:.2f}.h5",
    monitor="val_accuracy",
    verbose=1,
    save_best_only=True,
    save_weights_only=False,
    mode="auto",
    save_freq="epoch")

early_stopping = tf.keras.callbacks.EarlyStopping(
    monitor = "val_accuracy",
    min_delta = 0.001,
    patience=5,
    verbose = 1 ,
    mode = 'auto' ,
    baseline = None,
    restore_best_weights = True 
)

print(X_train.shape[0])
print(X_val.shape[0])

#without Data Augmentation

train_batch_size = 200
val_batch_size = 400
history_1 = model.fit(X_train, Y_train, validation_data = (X_val, Y_val), 
                      batch_size = train_batch_size, epochs = 100, 
                      steps_per_epoch= X_train.shape[0]/train_batch_size,
                      validation_batch_size= val_batch_size, 
                      validation_steps = X_val.shape[0]/val_batch_size, 
                      verbose = 2, 
                      callbacks=[learning_rate_reduction,model_checkpoint, early_stopping])
#validation_data = (X_val, Y_val),
#0.9936 val_accuracy

model_new = load_model('digitrec.19-0.99.h5')
model.summary()

preds = model.evaluate(X_val,Y_val)
print(preds)

pred_conv_wo_da = model.predict_classes(X_test, verbose=2)
print(pred_conv_wo_da)
submissions=pd.DataFrame({"ImageId": list(range(1,len(pred_conv_wo_da)+1)),
                         "Label": pred_conv_wo_da})
submissions.to_csv("Digit Recognizer Conv WO Data Augmentation.csv", index=False, header=True)

# Kaggle Score 0.99228

"""# Convolutional With Data Augmentation"""

#Data Augmentation

datagen = ImageDataGenerator(
        featurewise_center=False,  # set input mean to 0 over the dataset
        samplewise_center=False,  # set each sample mean to 0
        featurewise_std_normalization=False,  # divide inputs by std of the dataset
        samplewise_std_normalization=False,  # divide each input by its std
        zca_whitening=False,  # apply ZCA whitening
        rotation_range=30,  # randomly rotate images in the range (degrees, 0 to 180)
        zoom_range = 0.1, # Randomly zoom image 
        width_shift_range=0.2,  # randomly shift images horizontally (fraction of total width)
        height_shift_range=0.2,  # randomly shift images vertically (fraction of total height)
        horizontal_flip=False,  # randomly flip images
        vertical_flip=False)  # randomly flip images


datagen.fit(X_train)

model = Sequential()

model.add(Conv2D(filters = 32, kernel_size = (3,3),padding = 'Same', 
                 activation ='relu', input_shape = (28,28,1)))
model.add(Conv2D(filters = 32, kernel_size = (3,3),padding = 'Same', 
                 activation ='relu'))
model.add(MaxPool2D(pool_size=(2,2)))
model.add(Dropout(0.30))

model.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', 
                 activation ='relu'))
model.add(Conv2D(filters = 64, kernel_size = (3,3),padding = 'Same', 
                 activation ='relu'))
model.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))
model.add(Dropout(0.30))

model.add(Conv2D(filters = 12, kernel_size = (3,3),padding = 'Same', 
                 activation ='relu'))
model.add(Conv2D(filters = 12, kernel_size = (3,3),padding = 'Same', 
                 activation ='relu'))
model.add(MaxPool2D(pool_size=(2,2), strides=(2,2)))
model.add(Dropout(0.1))

model.add(Flatten())
model.add(Dense(256, activation = "relu"))
model.add(Dropout(0.30))
model.add(Dense(10, activation = "softmax"))


optimizer = Adam(lr=0.01)
model.compile(optimizer = optimizer , loss = "categorical_crossentropy", metrics=["accuracy"])
#model.summary()

train_batch_size = 200
val_batch_size = 400

history_2 = model.fit_generator(datagen.flow(X_train,Y_train, batch_size=train_batch_size),
                              epochs = 100, validation_data = (X_val,Y_val),
                              verbose = 2, steps_per_epoch=X_train.shape[0] / train_batch_size,  
                              validation_steps = X_val.shape[0]/val_batch_size,
                              callbacks=[learning_rate_reduction, model_checkpoint])

model.save('final_model.h5')

## how to use best model best val_accuracy to use on predictions?

pred_conv_w_da = model.predict_classes(X_test, verbose=0)

submissions=pd.DataFrame({"ImageId": list(range(1,len(pred_conv_w_da)+1)),
                         "Label": pred_conv_w_da})
submissions.to_csv("Digit Recognizer Conv With Data Augmentation.csv", index=False, header=True)

# Kaggle Score

def  plot_loss_acc(history,snapshot_name=None):
    loss = history.history['loss']
    val_loss = history.history['val_loss']
    epochs = range(len(loss))
    plt.plot(epochs, loss, 'bo')
    plt.plot(epochs, val_loss, 'g')
    plt.title('Training and validation loss')
    plt.legend(['train', 'val'], loc='upper right')
    if snapshot_name == None:
        filename= 'digit_loss.png'
    else:
        filename= snapshot_name+'_loss.png'
    plt.savefig(filename)
    plt.show()
    
    acc = history.history['accuracy']
    val_acc = history.history['val_accuracy']
    epochs = range(len(acc))
    plt.plot(epochs, acc, 'b')
    plt.plot(epochs, val_acc, 'g')
    plt.title('Training and validation accuracy')
    plt.legend(['train', 'val'], loc='lower right')
    if snapshot_name == None:
        filename= 'digit_acc.png'
    else:
        filename= snapshot_name+'_acc.png'
    plt.savefig(filename)
    plt.show()

plot_loss_acc(history_2)

load_model('final_model.h5')