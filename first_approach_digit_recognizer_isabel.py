# -*- coding: utf-8 -*-
"""First Approach Digit Recognizer Isabel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Sf3_UuotKlYPOXgZevapGVqJ20nbeMag
"""

!pip install tensorflow==2.3.0

import tensorflow as tf

from tensorflow.keras import layers, models
from tensorflow import keras
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from keras.preprocessing.image import ImageDataGenerator

train = pd.read_csv("train.csv")
test = pd.read_csv("test.csv")

X_train = (train.iloc[:,1:].values).astype('float32') # all pixel values
y_train = train.iloc[:,0].values.astype('int32') # only labels i.e targets digits
X_test = test.values.astype('float32')

X_train = X_train.reshape(X_train.shape[0], 28, 28)

for i in range(0, 9):
    plt.subplot(330 + (i+1))
    plt.imshow(X_train[i], cmap=plt.get_cmap('gray'))
    plt.title(y_train[i]);

#expand 1 more dimention as 1 for colour channel gray
X_train = X_train.reshape(X_train.shape[0], 28, 28,1)
X_train.shape
#X_train = X_train / 255


X_test = X_test.reshape(X_test.shape[0], 28, 28,1)
X_test.shape
#X_test = X_test / 255

from keras.preprocessing.image import ImageDataGenerator

from keras.preprocessing import image
gen = image.ImageDataGenerator()

from sklearn.model_selection import train_test_split
X = X_train
y = y_train
X_train, X_val, y_train, y_val = train_test_split(X_train, y_train, test_size=0.10, random_state=42)
batches = gen.flow(X_train, y_train, batch_size=64)
val_batches=gen.flow(X_val, y_val, batch_size=64)

"""# One layer, dense"""

model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),  # input layer (1)
    keras.layers.Dense(128, activation='relu'),  # hidden layer (2)
    keras.layers.Dense(10, activation='softmax') # output layer (3)
])

model.compile(optimizer='adam',
              loss = 'sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(X_train, y_train, epochs=20)

predictions = model.predict_classes(X_test, verbose=0)

submissions=pd.DataFrame({"ImageId": list(range(1,len(predictions)+1)),
                         "Label": predictions})
submissions.to_csv("Digit Recognizer Dense 20E.csv", index=False, header=True)

### Test Score: 0.89185

### 10 Epochs: 0.93253

"""# convolutional layers"""

#optimizer=tf.keras.optimizers.Adam(lr=0.01)

model = tf.keras.Sequential(
    [
     tf.keras.layers.Reshape(input_shape=(28*28,), target_shape=(28, 28, 1)),
     tf.keras.layers.Conv2D(kernel_size = 3, filters = 64, padding = 'same', activation = 'relu', stride = 1),
     tf.keras.layers.MaxPooling2D(pool_size = (2,2)),
     tf.keras.layers.Conv2D(pass)
     tf.keras.layers.MaxPooling2D()
    ]
)

model_1 = models.Sequential()
model_1.add(layers.Conv2D(28, (3, 3), activation='relu', input_shape=(28, 28, 3)))
model_1.add(layers.MaxPooling2D((2, 2)))
model_1.add(layers.Conv2D(56, (3, 3), activation='relu'))
model_1.add(layers.MaxPooling2D((2, 2)))
model_1.add(layers.Conv2D(56, (3, 3), activation='relu'))
model_1.summary()

model_1.add(layers.Flatten(input_shape = (28, 28)))
model_1.add(layers.Dense(128, activation='relu'))
model_1.add(layers.Dense(10))

model_1.summary()

model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

history = model.fit(X_train, y_train, epochs=5)

predictions_con = model.predict_classes(X_test, verbose=0)

submissions=pd.DataFrame({"ImageId": list(range(1,len(predictions_con)+1)),
                         "Label": predictions_con})
submissions.to_csv("Digit Recognizer Convolultional.csv", index=False, header=True)

### Kaggle Score: 0.11403